/**
\page CPFGlobalVariables API Global Variables

This page holds the documentation of global CMake variables that can be set by the clients of
CPFCMake to influence its behavior.

\section cpfGlobalVariables Global variables and cache variables

CPFCMake introduces some variables of global scope that provide CI-project wide defaults 
for recurring package settings. 
Most of them can be overridden with optional parameters when adding individual packages. 
This spares the user from repeatedly specifying the same values while at the same time allowing 
individual values for each package where necessary. The best place to set these variables is
in your projects default configuration files in the \c CIBuildConfigurations directory.

\subsection cpfVariables CPF Variables

* <b>\ref CPF_ENABLE_ABI_API_STABILITY_CHECK_TARGETS:</b>
* \ref CPF_CI_PROJECT
* \ref CPF_ENABLE_ABI_API_COMPATIBILITY_REPORT_TARGETS
* \ref CPF_ENABLE_ACYCLIC_TARGET
* \ref CPF_ENABLE_CLANG_TIDY_TARGET
* \ref CPF_ENABLE_OPENCPPCOVERAGE_TARGET
* \ref CPF_ENABLE_PACKAGE_DOX_FILES_GENERATION
* \ref CPF_ENABLE_PRECOMPILED_HEADER
* \ref CPF_ENABLE_RUN_TESTS_TARGET
* \ref CPF_ENABLE_VALGRIND_TARGET
* \ref CPF_ENABLE_VERSION_RC_FILE_GENERATION
* \ref CPF_MAINTAINER_EMAIL
* \ref CPF_MINIMUM_CMAKE_VERSION
* \ref CPF_OWNER
* \ref CPF_PROJECT_WEBPAGE_URL 
* \ref CPF_VERBOSE
* \ref CPF_WARNINGS_AS_ERRORS
* \ref CPF_WEBSERVER_BASE_DIR


#### CPF_MINIMUM_CMAKE_VERSION ####

The minimum cmake version required by the CPF. This can be used by clients in their own
calls to <a href="https://cmake.org/cmake/help/latest/command/add_subdirectory.html">cmake_minimum_required()</a>.

#### CPF_CI_PROJECT ####

This is set to name of the CI parent project and allows to use the name after calling
\c cpfInitPackageProject() which overrides the \c CMAKE_PROJECT_NAME variable with the
name of the package project.


\subsection cpfAllowedCMakeVariables Allowed CMake Variables

CMake introduces its own set of global variables. Many of them can still be used.
Others may be overridden by CPFCMake while implementing it'S functionality.
Here is a list of CMake variables that CPFCMake expects you to set.

* <b>BUILD_SHARED_LIBS:</b> This can still be used to globally switching between creating
shared or static libraries. If you provide library packages for other developers, you should
not set this variable on the package level, to leave the choice to your clients.
* <b>CMAKE_<config>_POSTFIX:</b> CPFCMake sets default values for this, but you can
change the values if you do not like them or have your own compiler configurations.
* <b>CMAKE_BUILD_TYPE:</b> While CMake does not require a value for this variable, CPFCMake does.
This should be the name of your compiler configuration like "Debug" or "Release".
* <b>CMAKE_GENERATOR:</b> The \c 2_Generate.py script does not use cmake's generator argument
but instead relies on the value of this variable to get it. This is done to allow having the
specification of the generator in the configuration file instead of re-typing it on every
cmake call. The default configurations that are provided by CPFCMake already set a value
for that variable.
* <b>CMAKE_MAKE_PROGRAM:</b> This can be used to define the build-tool that is used.
The default configurations that are provided by CPFCMake already set a value
for that variable.
* <b>CMAKE_TOOLCHAIN_FILE:</b> CPFCMake uses tool-chain that should hold the
specification of the used compiler and the definition of all ABI relevant compiler flags.
CPFCMake provides tool-chain-files for it's default configurations on which you can
build to create your own ones.


\subsection cpfOverriddenCMakeVariables Overridden CMake Variables

Here is a list of the CMake variables for which CPFCMake assigns
fixed values. Setting these variables should in the best case 
have no effect.

* <b>PROJECT_VERSION:</b> CPFCMake retrieves the version from the underlying
git repository. There should be no need to set this manually.

* <b>CMAKE_EXPORT_COMPILE_COMMANDS:</b> CPFCMake will set this to ON when
using the clang compiler in order to allow clang-tidy to be run.

