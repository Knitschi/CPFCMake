/**

\page CPFCustomTargets Custom targets

\section CPFCustomTargetsSection Custom targets in the CPF

The lists do not contain some private targets of the CPF that are only created as sub-steps of the
targets that are of interest to the user.

\subsection GlobalTargets Global targets

A CPF project contains some targets that operate on the global level.
They either execute operations that can not be done for each package
in separation or *bundle* up a certain kind of per-package targets.
In this case building the bundle target will simply build all
per-package targets of that kind.

Here is a list of targets that can exist once per CPF project.

- \ref abicompliancechecker
- \ref ALL_BUILD
- \ref distributionPackages
- \ref doxygen
- \ref dynamicAnalysis
- \ref globalFiles
- \ref INSTALL
- \ref pipeline
- \ref runAllTests
- \ref runFastTests
- \ref staticAnalysis
- \ref ZERO_CHECK


\subsection PackageTargets Package targets

Here is a list of targets that can exist once per CPF package.

- \ref abicompliancechecker_package
- \ref clangtidy_package
- \ref distributionPackages_package
- \ref install_package
- \ref opencppcoverage_package
- \ref package
- \ref package_fixtures
- \ref package_tests
- \ref runAllTests_package
- \ref runFastTests_package
- \ref valgrind_package


\subsection TargetAnnotations Target annotations

\subsubsection abicompliancechecker abi-compliance-checker

This target bundles the \ref abicompliancechecker_package targets.

\subsubsection ALL_BUILD ALL_BUILD

This target builds all binary targets.

\subsubsection distributionPackages distributionPackages

This target bundles the \ref distributionPackages_package targets.

\subsubsection doxygen doxygen

This target runs doxygen to generate the documentation for all owned packages.
It can be disabled with the \c CPF_ENABLE_DOXYGEN_TARGET variable.

\subsubsection dynamicAnalysis dynamicAnalysis

This target bundles the \ref valgrind_package and \ref opencppcoverage_package targets.

\subsubsection globalFiles globalFiles

This is only a file container target that does not execute any commands.
It holds all source files that are of global scope like tool configuration
files, global documentation, etc..

\subsubsection INSTALL INSTALL/install

This CMake standard target bundles the \ref install_package targets. For *Visual Studio* generators
the capitalized name is used. With *make* and *ninja* generators the small letter name
is generated.

\subsubsection pipeline pipeline

The top-level bundle target that will make sure that all other targets are built.

\subsubsection runAllTests runAllTests

This target bundles the \ref runAllTests_package targets.

\subsubsection runFastTests runFastTests

This target bundles the \ref runFastTests_package targets. This target is not
contained in the \ref pipeline target which always builds the \ref runAllTests target.

\subsubsection staticAnalysis staticAnalysis

This target bundles the \ref runFastTests_package targets. It also
checks that the dependency graph of the projects binary targets is acyclic.

\subsubsection ZERO_CHECK ZERO_CHECK

A CMake default target that runs the CMake generate step.

\subsubsection abicompliancechecker_package abi-compliance-checker_\&lt;package\&gt;

This is a bundle target that runs the Abi-Compliance-Checker tool. The target only exists for
project configurations that use *Gcc* with debug flags and for shared library packages.

#### Report compatibility ####
The basic functionality is to create html reports that compare the abi/api-compatibility of
a previous libray package version with the current one. The reporst are added to the project
web-page. To enable this, the target must be able to download previously generated distribution 
packages of that package from the project web-page, which must contain generated abi-dump files. 
This complex requirement makes the target somewhat fragile. This functionality can be 
disabled with the \c CPF_ENABLE_ABI_API_COMPATIBILITY_CHECK_TARGETS config variable.

#### Enforce compatibility ####
You can also enable targets that will fail to build if abi or api compatibility is hurt
by your current changes. This option can be switched on in stable branches. To do so
use the \c CPF_CHECK_ABI_STABLE and \c CPF_CHECK_API_STABLE config variables.

\subsubsection clangtidy_package clang-tidy_\&lt;package\&gt;

This target only exists when compiling on Linux with the clang compiler.
It runs the \c clang-tidy tool on the packages source files.

The target can be disabled with the \c CPF_ENABLE_STATIC_ANALYSIS_TARGET config variable.

\subsubsection distributionPackages_package distributionPackages_\&lt;package\&gt;

Creates all *distribution packages* of the package. A *distribution package* is a file that is
distributed to users of the package. This can be a zip file that contains the binaries or sources or 
an installer. The target is only created if the \c addPackage() function has the \c DISTRIBUTION_PACKAGES
argument set.

\subsubsection install_package install_\&lt;package\&gt;

This target copies the packages binary files and public headers to the
\c ${CMAKE_INSTALL_PREFIX}/\<package\> directory.

\todo Check if this can still be used like the Linux \c {make install} step without breaking the
creation of the distribution packages.

\subsubsection opencppcoverage_package opencppcoverage_\&lt;package\&gt;

This target runs the test executable with OpenCppCoverage tool in order to create
an html report that shows the code lines that are hit while running the tests.
This target will only exist for project configurations that use *MSVC* and will
only run the tool when compiling in *Debug* configuration.

The target can be disabled with the \c CPF_ENABLE_DYNAMIC_ANALYSIS_TARGET config variable.

\subsubsection package \&lt;package\&gt;

The main binary target of the package.

\subsubsection package_fixtures \&lt;package\&gt;_fixtures

An additional library that can be used to share test utility code between packages.
It is only created if the \c addPackage() function has the \c FIXTURE_FILES and \c PUBLIC_FIXTURE_HEADER arguments set.

\subsubsection package_tests \&lt;package\&gt;_tests

The test executable that belongs to the package. This target is only created
if the \c addPackage() function has the \c TEST_FILES argument set. The executable
should run automated tests when executed.

\subsubsection runAllTests_package runAllTests_\&lt;package\&gt;

This target runs all the tests in the \ref package_tests executable.

The target can be disabled with the \c CPF_ENABLE_RUN_TESTS_TARGET config variable.

\subsubsection runFastTests_package runFastTests_\&lt;package\&gt;

This target runs all the tests in the \ref package_tests executable that have either
the word *FastFixture* or *FastTests* included in their name. It is the the users
responsibility to make sure that the tests with those names are really fast tests.

The purpose of the target is to provide a way of executing only tests that are run quickly
an which are therefor useful when working in a tight test-driven development cycle.

The target can be disabled with the \c CPF_ENABLE_RUN_TESTS_TARGET config variable.

\subsubsection valgrind_package valgrind_\&lt;package\&gt;

This target runs the test executable with the *Valgrind* tool, which
can help to detect memory leaks or undifined behavior. The target
only exists for project configurations that use *Gcc* or *Clang* with
debug flags. When this target is enabled you must also add the empty file 
\c Other/MyPackageValgrindSuppressions.supp file to all packages.
You can use this file to suppress false positives or unfixable
issues that are found by *Valgrind*.

The target can be disabled with the \c CPF_ENABLE_DYNAMIC_ANALYSIS_TARGET config variable.











*/