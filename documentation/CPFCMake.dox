/**

\defgroup CPFCMakeGroup CPFCMake

\brief A cmake package that implements a standardized c++ CMake project with additional CI functionality.

The CPFCMake package is the most basic component of the CMakeProjectFramework. It helps with setting
up a CMake based C++ project with extended functionality. The package tries to solve the following problems:

- Abstraction of common CMake code to a higher level. CMakeProjectFramework projects are set up by using only
a handfull of CMake functions. This removes implementation details from the `CMakeLists.txt` files.
- Providing a standardized directory structure for a C++ project.
- Providing additional CI tasks like code-analysis or documentation-generation as custom targets.
- Package-versioning based on version tags provided by the Git repository.
- Modularisation of the code base into individual CMake packages.
- Use of cmake configuration files, which contain build configurations that outlive the deletion of the build directory and the `CMakeCache.txt`file.

*/


//##########################################################################################
/**
\page DirectoryLayout

# Directory Layout # 

The root-folder of the code base ccbContains the following folders.

- \b Sources: Contains the C++ code and CMake code. It has a sub-folder for each C++ \em target (library or executable) in the code-base. 
There is also a sub-folder that ccbContains CMake utility code. The folder ccbContains a set of \em global files like the CMakeLists root file, the Doxygen
configuration files or generated \c .cmake files for developer dependent CMake variables.

- \b Generated: This folder is not checked into git but is generated when running the \c 1_Generate.py script. The directory will contain
one subdirectory for each configuration for which the \c 1_Generate.py script was executed. The configuration subdirectory will itself
contain files and directories that are used by the build-system. Of bigger interest are the following subdirectories. 

  + InstallStage: Contains all binaries of each package in the CppCodeBase. The executables in this directories subdirectories should be ready
  to run after executing the pipeline.
  + html: Contains all html pages that are generated when building the pipeline.

- \b Configuration: Contains \c .cmake files for each configuration that was created with the \c 0_Configure.py script.

- \b Infrastructure: This folder ccbContains files that define the build pipeline of the CppCodeBase project. A major part of these files
are python scripts that help to execute the individual steps of the pipeline. Then there are various scripts and docker files that
define the setup of the machines that are used to build the pipeline on the <a href="https://jenkins.io">jenkins</a> build-server. 

- \b Tools: Contains tools that are needed to run the build-pipeline
*/


//##########################################################################################
/**
\page BuildPipeline

# Build Pipeline #

The build pipeline consists of a number of 'jobs' that accomplish the following tasks:

- Automatically <b>retrieving and building all C++ dependencies</b> before the code of the CppCodeBase is build.
Internally this is done with the <a href="https://github.com/ruslo/hunter">hunter package manger</a>.
- <b>Build the code.</b> This is done with a combination of CMake and platform specific build tools.
- <b>Run tests.</b>
- <b>Run static Analysis.</b> This is currently only done on Linux with the \em Clang-Tidy tool.
- <b>Run dynamic Analysis.</b> On Linux this step runs the automated tests with the \em Valgrind tool to find possible
memory leaks. On Windows this step runs the automated tests with \em OpenCppCoverage tool to create a test coverage report.
- <b>Generate Documentation.</b> This step runs \em Doxygen to create the HTML documentation.

Most of the jobs are implemented as CMake targets. This has the advantage that we can use the
parallelization and 'incremental-build' functionality that is already implemented by the build-system.
This also may allow conveniently building specific targets by using the GUI of the IDE.
A disadvantage is that depending on the underlying build-system the output is more or
less mixed-up and it often takes some time to parse the output until the error that caused
the build to fail is found.

There is also a groovy script that defines the jenkins build-job. Development on this script
tends to be slow because each iteration requires a commit, push and re-run of the pipeline.
That is another reason to keep the script as small as possible.
*/


//##########################################################################################
/**
\page Documentation The Documentation Pipeline

# Documentation #

The CppCodeBase uses <a href="http://www.stack.nl/~dimitri/doxygen/download.html">Doxygen</a> to allow keeping the documentation right beside the code.
Doxygen has <a href="http://plantuml.com/">PlanUml</a> enabled to allow embedding UML diagramms into to documentation.

## Implementation details of the documentation generation ##

### Searching ###

The search functionality is configured to use the server-side search approach as described <a href="http://www.stack.nl/~dimitri/doxygen/manual/extsearch.html">here</a>.
To make it work these points must be implemented.

- The \c DoxygenConfig.txt must contain the correct value for the \c SEARCHENGINE_URL key. This means that the url of the \c doxysearch.cgi file must be
known and accessible <b>before</b> generating the documentation. When the url of the documentation web-server changes, this value must be changed too.
One can test if the cgi script works by entering \c http://feldrechengeraet/cgi-bin/doxysearch.cgi?test. This should return <tt>test succesfull</tt>.
The file \c search/search.js in the doxygen directory should also contain a correct linkt to the \c doxysearch.cgi file.
- The web-server needs access to the right \c doxysearch.cgi file which is provided by Doxygen. The \c doxysearch.cgi file must come
from the same version of doxygen that is used to generate the html files and the \c doxysearch.db search database.
- The webserver must be configured to use cgi scripts, which is done by providing the serve-cgi-bin.conf file with the docker-image of the webserver.
The Dockerfile makes sure the file is copied into the container.
- The help generation needs to execute the \c doxyindexer.exe to create the \c doxysearch.db serach-index for the \c doxysearch.cgi. This is done in
the python script \c 7_GenerateDocumentation.py
- The generated files must be copied to the documentation server container with the command
\code{.sh}
docker cp /var/lib/jenkins/www/html docserver:/var/www
\endcode

### The Dependency Graph ###

The documentation ccbContains an automatically updated \ref DependencyGraph. The graph is generated from a \c graphviz dot-file which is generated when
\c CMake is run. The \c 7_GenerateDocumentation.py script searches for the dot-file and copies it to the DoxygenOutput folder.

*/
